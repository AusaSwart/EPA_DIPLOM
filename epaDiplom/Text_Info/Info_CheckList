

       Вторым этапом является создание Java-приложения, консольного, которое будет демонстрировать логику
       Личного кабинета сотрудника (ЛКС)

               Вход -- (готово)(done)

               Приветствие сотрудника и первый выбор, логин или регистрация -- (готово)(done)

               Если сотрудник логинится => проверка логина и соответствующего ему пароля,
               далее прога вытаскивает id сотрудника для дальнейшего взаимодействия -- (готово)(done)

               Если логин\пароль введены неверно, вторая попытка и последующие -- (готово)(done)

               Проверка на существующий логин -- (готово)

               *  ввод обычного пароля, но проверка по закриптованному (?)

               Если сотрудник регистрируется, то создается таблица с логином и паролем,
               привязанная к двум другим, которые можно будет заполнить позднее -- (готово)

               Id сотрудника также будет сохранятся для дальнейшего взаимодйствия -- (готово)

               *  проверка на повторение логина, чтобы не было одинаковых -- (готово)

               !! При создании пароля он хешируется\\криптуется

               Далее по полученному id будет подтягиваться информация по поводу событий и тасок,
               привязанных к данному сотруднику -- (готово)

               Далее должны подтянуться запросы с журнала ухода, -- (готово)

               *   возможность подтверждать\отклонять запросы (привилегии)

               Подтягивание запросов с тасок -- (готово)

               Появление функционала, что может совершать сотрудник

               *  в зависимости от привилегий => разные возможности

               	Возможности:

               1.	Посмотреть инфу о себе (личная страница)

               2.	Заполнить заявление на отгул

               3.	Посмотреть список определённых сотрудников

               4.	* Внести нового сотрудника\изменить инфу (для адм) (привилегии)

               5.	Создание события и отправка другим сотрудникам

               6.	Создание таски

               7.	* Заполнение недостающих полей (привилегии)




               Рефакторинг кода = > расформирование кода по классам, оптимизация и .т.п.

               Привилегии будут вытягиваться сначала, потом в зависимости от цифры будет подтягиваться
               функционал в конце. (мб сделать проверку на апрувы по привам? Продумать этот момент)



кусочек для апрувов на лог
//                        boolean ans = false;
//                        do {
//                                System.out.println("   Do you approve LS of employee:" + idEmployee + "? y/n");
//                                Scanner input = new Scanner(System.in);
//                                String answer = input.nextLine();
//                                if (answer.equals("y")) {
//                                        tmp = "UPDATE log_statement SET approve = 1 WHERE id_employee ="
//                                                + idEmployee + " AND id =" + idLS + ";";
//                                        stmt.executeUpdate(tmp);
//                                        System.out.println("   Done");
//                                        ans = true;
//                                } else if (answer.equals("n")) {
//                                        tmp = "UPDATE log_statement SET approve = 0 WHERE id_employee ="
//                                                + idEmployee + " AND id =" + idLS + ";";
//                                        stmt.executeUpdate(tmp);
//                                        System.out.println("   Done");
//                                        ans = true;
//                                } else {
//                                        System.out.println("   Incorrect");
//                                        System.out.println();
//                                }
//                        } while (!ans);



проверка ДАО классов
//                DBConnectionManager dcm = new DBConnectionManager("127.0.0.1:5432",
//                "EPA", "postgres", "123qwe");
//
//                try{
//                        Connection connection = dcm.getConnection();
//                        MainInfoDAO mainInfoDAO = new MainInfoDAO(connection);
//                        MainInfo mainInfo = mainInfoDAO.findById(1000000);
//                        System.out.println(mainInfo.getFirstName() + " " + mainInfo.getLastName() + " " +
//                                mainInfo.getMiddleName());
//
//                        } catch (SQLException ex) {
//                        throw new RuntimeException(ex);
//                }